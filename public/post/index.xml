<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>所有文章索引 on Keepwalking</title>
    <link>https://huangbaihua001.github.io/post/</link>
    <description>Recent content in 所有文章索引 on Keepwalking</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2022, Keepwalking; all rights reserved. Powered by Hugo</copyright>
    <lastBuildDate>Tue, 18 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://huangbaihua001.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>初探 Transformer 背后的数学</title>
      <link>https://huangbaihua001.github.io/post/ai/llm/transfermor_math/</link>
      <pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/ai/llm/transfermor_math/</guid>
      <description>
        
          
            初探 Transformer 背后的数学 自2017年问世以来，Transformer 不仅是一种创新的模型架构，更是数学与工程精妙结合的典范。它通过自注意力机制（Se
          
          
        
      </description>
    </item>
    
    <item>
      <title>如何在非母语环境下掌握英语</title>
      <link>https://huangbaihua001.github.io/post/english/how-to/</link>
      <pubDate>Wed, 19 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/english/how-to/</guid>
      <description>
        
          
            &lt;p&gt;在非母语环境下掌握一门语言是比较困难的，但它只是困难并不是不可能。笔者结合自身攻克英语的实践， 总结了一些心得体会共勉。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>操作系统 - 页式内存管理</title>
      <link>https://huangbaihua001.github.io/post/os/page_based_memory_management/</link>
      <pubDate>Fri, 20 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/os/page_based_memory_management/</guid>
      <description>
        
          
            &lt;p&gt;页式内存管理是一种内存空间存储管理的技术，由于它不要求进程的程序段和数据在内存中连续存放，从而有效地解决了碎片问题。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>图论-图解-克鲁斯卡尔 (Kruskal) 算法</title>
      <link>https://huangbaihua001.github.io/post/math/kruskal/</link>
      <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/math/kruskal/</guid>
      <description>
        
          
            &lt;p&gt;在图论中，克鲁斯卡尔 (Kruskal) 算法是用于求解图的最小生成树的典型算法。本文试图用一种简单易懂的图解步骤方式来讲解该算法。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>系统分析师重要知识点</title>
      <link>https://huangbaihua001.github.io/post/arch/arch_analysis_key/</link>
      <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/arch/arch_analysis_key/</guid>
      <description>
        
          
            &lt;p&gt;回顾历年的系统分析师真题，以下知识点为考察重点、分数占比约70%，务必熟练掌握。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>以动词概括的英语语法体系</title>
      <link>https://huangbaihua001.github.io/post/english/grammer-verb-outline/</link>
      <pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/english/grammer-verb-outline/</guid>
      <description>
        
          
            &lt;p&gt;英语语法之所以难学，一般是没有在脑海里建立清晰的语法体系。如何在脑海里构建自己的语法体系呢？该文章以英语语法中最重要的动词为主线，概括了一套英语语法体系。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>PSI(程序结构接口)-Intellij 平台的核心抽象</title>
      <link>https://huangbaihua001.github.io/post/idea/psi_intro/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/idea/psi_intro/</guid>
      <description>
        
          
            &lt;p&gt;Intellij IDEA 是业界公认最智能，最强大的 Java IDE。个人认为 Intellij 平台底层的抽象能力是非常强的。 PSI 就是其中之一。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PSI&lt;/strong&gt; 是程序结构接口 &lt;strong&gt;(Program Structure Interface)&lt;/strong&gt; 的简称，在 Intellij 平台中负责解析文件、创建语法和语义代码模型。
它是平台的核心抽象层，支持平台的许多功能。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>5分钟 IDEA 插件开发快速入门 Demo</title>
      <link>https://huangbaihua001.github.io/post/idea/five_minute_quick_demo/</link>
      <pubDate>Sat, 20 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/idea/five_minute_quick_demo/</guid>
      <description>
        
          
            &lt;p&gt;基于 Gradle 开发 IntelliJ 插件是官方推荐的方式。本 Demo
使用 &lt;a href=&#34;https://github.com/JetBrains/intellij-platform-plugin-template&#34;&gt;IntelliJ Platform Plugin Template&lt;/a&gt; 快速构建一个插件项目 。
利用 &lt;a href=&#34;https://plugins.jetbrains.com/docs/intellij/intellij-platform.html&#34;&gt;IntelliJ Platform&lt;/a&gt; 平台开发自己的第一个插件！&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>现代软件过度工程中的十大错误</title>
      <link>https://huangbaihua001.github.io/post/arch/consistent-hasing/</link>
      <pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/arch/consistent-hasing/</guid>
      <description>
        
          
            &lt;p&gt;现代软件过度工程中的十大错误&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>机器学习入门-算法-协同过滤简介</title>
      <link>https://huangbaihua001.github.io/post/mache-learing-collaborative-filtering/</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/mache-learing-collaborative-filtering/</guid>
      <description>
        
          
            &lt;p&gt;本文是机器学习常用算法之协同过滤算法系列篇中的第一篇，主要讲解了协同过滤的基本概念，如何求相似度，以及如何根据基于物品的协同过滤对物品进行评分。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>在Hubo中使用Mermaid</title>
      <link>https://huangbaihua001.github.io/post/mermaid-in-hugo/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/mermaid-in-hugo/</guid>
      <description>
        
          
            &lt;p&gt;本文章简要描述了在Hugo中如何引入&lt;a href=&#34;https://mermaidjs.github.io/&#34;&gt;Mermaid&lt;/a&gt;支持以及几个简单的图例&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>面向领域的微服务架构-来自优步的实践</title>
      <link>https://huangbaihua001.github.io/post/microservice-architecture/</link>
      <pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/microservice-architecture/</guid>
      <description>
        
          
            &lt;p&gt;面向领域的微服务架构-来自优步的实践。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>CAP理论简介</title>
      <link>https://huangbaihua001.github.io/post/cap-theorem/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/cap-theorem/</guid>
      <description>
        
          
          
        
      </description>
    </item>
    
    <item>
      <title>清晰架构</title>
      <link>https://huangbaihua001.github.io/post/the-clean-architecture/</link>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/the-clean-architecture/</guid>
      <description>
        
          
            &lt;p&gt;&lt;a href=&#34;https://blog.cleancoder.com/&#34;&gt;Bob&lt;/a&gt;(编程界骨灰级人物)的清晰架构。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>一致性哈希</title>
      <link>https://huangbaihua001.github.io/post/consistent-hasing/</link>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/consistent-hasing/</guid>
      <description>
        
          
            &lt;p&gt;最近我碰到过几次使用一致性哈希的情况。介绍这个概念的论文&lt;a href=&#34;http://citeseer.ist.psu.edu/karger97consistent.html&#34;&gt;《一致性哈希和随机树：分布式缓存协议，用于解决互联网应用中的热点问题。David Karger等人著》&lt;/a&gt;
出现在十年前，不过最近似乎这个概念已经悄悄地应用到从亚马逊的&amp;quot;Dynamo&amp;quot;到Last.fm提供的&amp;quot;Memcached&amp;quot;等越来越多的服务当中。那么，什么是一致性哈希，为什么要关心它？&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>优秀的可伸缩性</title>
      <link>https://huangbaihua001.github.io/post/awesome-scalability/</link>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/awesome-scalability/</guid>
      <description>
        
          
            &lt;p&gt;这是一份经过精心整理的阅读清单，它详细说明了在大型系统中如何保障系统的可伸缩性，可靠性以及高性能的常见模式。
该阅读清单由知名工程文章及来源可靠的资源组成。 这些内容对可伸缩性等相关概念均有很好的阐述。清单中研究的案例也
都来自于服务于数百万，乃至数十亿用户且经过实战检验过的系统。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>10大系统设计面试题</title>
      <link>https://huangbaihua001.github.io/post/top-10-sdis/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/top-10-sdis/</guid>
      <description>
        
          
            &lt;p&gt;如何设计大规模分布式系统已经成为软件工程师面试的标配。工程师们在系统设计面试中表现吃力，主要有两个原因：一、缺少开发大规模系统的经验；二、系统设计面试非机构化，开放性的特点，通常问题都没有标准答案。&lt;/p&gt;
&lt;p&gt;在系统设计面试中表现出色将给你带来高回报，因为它能反映你处理复杂系统的能力，并能转化成面试公司为你提供的高级职位和高薪水。&lt;/p&gt;
&lt;p&gt;本文列举了10大系统设计面试题，在这些面试题中，应该如何回答，跟面试官讨论的关键点应该在哪里。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>10倍程序员的秘密</title>
      <link>https://huangbaihua001.github.io/post/the-mythical-10x-programmer/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/the-mythical-10x-programmer/</guid>
      <description>
        
          
            &lt;p&gt;高效的程序员应该具备哪些素质，&amp;quot;10倍程序员&amp;quot;给你答案!。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
    <item>
      <title>优秀的首席技术官</title>
      <link>https://huangbaihua001.github.io/post/awesome-cto/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua001.github.io/post/awesome-cto/</guid>
      <description>
        
          
            &lt;p&gt;不想当 CTO 的工程师不是合格的工程师，那么如何才能成为一名优秀的CTO? 本文从网络上精心挑选了一系列文章，对有志成为一名 CTO 的工程师提供一些经验和方法。&lt;/p&gt;
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
